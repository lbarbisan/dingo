<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE parser SYSTEM "dtd/parser.dtd">
<parser>
	<terminal id="plus" priority="1" associativity="left" />
	<terminal id="star" priority="2" associativity="left" />
	<terminal id="div" priority="2" associativity="left" />
	<terminal id="modulo" priority="2" associativity="left" />
	<terminal id="minus" priority="1" associativity="left" />

	<terminal id="equals" priority="0" associativity="non-associative" />
	<terminal id="notEquals" priority="0"
		associativity="non-associative" />

	<terminal id="sup" priority="0" associativity="left" />
	<terminal id="inf" priority="0" associativity="left" />
	<terminal id="sup_equals" priority="0" associativity="left" />
	<terminal id="inf_equals" priority="0" associativity="left" />
	<terminal id="l_shift" priority="0" associativity="left" />
	<terminal id="r_shift" priority="0" associativity="left" />
	<terminal id="not" priority="3" />
	<terminal id="and" priority="2" associativity="left" />
	<terminal id="or" priority="1" associativity="left" />

	<terminal id="semicolon" />
	<terminal id="rpar" />
	<terminal id="lpar" />
	<terminal id="l_brace" />
	<terminal id="r_brace" />
	<terminal id="dot" />
	<terminal id="comma" />

	<terminal id="dingo" />
	<terminal id="def" />
	<terminal id="_if" />
	<terminal id="_else" />
	<terminal id="_for" />
	<terminal id="_foreach" />
	<terminal id="_in" />
	<terminal id="forever" />
	<terminal id="_break" />
	<terminal id="_continue" />
	<terminal id="print" />
	<terminal id="println" />
	<terminal id="gui" />
	<terminal id="_return" />
	<terminal id="_void" />
	<terminal id="_var" />

	<terminal id="numberValue" />
	<terminal id="stringValue" />
	<terminal id="booleanValue" />

	<terminal id="string_type" />
	<terminal id="numeric_type" />
	<terminal id="array_type" />
	<terminal id="function_type" />
	<terminal id="object_type" />

	<terminal id="error" />

	<terminal id="identifier" />
	<terminal id="numeric_identifier" />
	<terminal id="string_identifier" />

	<start id="start" />

	<production id="dingo_start">
		<lhs id="start" />
		<rhs>
			<right id="dingo" />
			<right id="identifier" />
			<right id="l_brace" />
			<right id="instructions" />
			<right id="r_brace" />
		</rhs>
	</production>

	<production id="empty_instructions_def">
		<lhs id="instructions" />
		<rhs></rhs>
	</production>

	<production id="full_instructions_def">
		<lhs id="instructions" />
		<rhs>
			<right id="instructions" />
			<right id="instruction" />
			<right id="semicolon" />
		</rhs>
	</production>

	<production id="instruction_expr_def">
		<lhs id="instruction" />
		<rhs>
			<right id="expr_def" />
		</rhs>
	</production>

	<production id="full_var_keyword">
		<lhs id="var" />
		<rhs>
			<right id="_var" />
		</rhs>
	</production>

	<production id="empty_var_keyword">
		<lhs id="var" />
		<rhs />
	</production>
	
	<production id="empty_type_expr_def">
		<lhs id="expr_def" />
		<rhs>
			<right id="var" />
			<right id="identifier" />
			<!--<right id="function_call" />-->
		</rhs>
	</production>

	<production id="full_type_expr_def">
		<lhs id="expr_def" />
		<rhs>
			<right id="var" />
			<right id="type" />
			<right id="identifier" />
		</rhs>
	</production>

	<production id="init_def">
		<lhs id="expr_def" />
		<rhs>
			<right id="init" />
		</rhs>
	</production>

	<production id="full_type_init_identifier_def">
		<lhs id="init" />
		<rhs>
			<right id="var" />
			<right id="type" />
			<right id="identifier" />
			<right id="equals" />
			<right id="expr" />
		</rhs>
	</production>

	<production id="empty_type_init_identifier_def">
		<lhs id="init" />
		<rhs>
			<right id="var" />
			<right id="identifier" />
			<right id="equals" />
			<right id="expr" />
		</rhs>
	</production>

	<production id="numeric_expr_def">
		<lhs id="expr" />
		<rhs>
			<right id="numeric_expr" />
		</rhs>
	</production>

	<production id="string_expr_def">
		<lhs id="expr" />
		<rhs>
			<right id="string_expr" />
		</rhs>
	</production>
	
	<production id="function_call_expr_def">
		<lhs id="expr" />
		<rhs>
			<right id="function_call" />
		</rhs>
	</production>
	
	<production id="identifier_numeric_def">
		<lhs id="numeric_expr" />
		<rhs>
			<right id="numeric_identifier" />
		</rhs>
	</production>

	<production id="identifier_string_def">
		<lhs id="string_expr" />
		<rhs>
			<right id="string_identifier" />
		</rhs>
	</production>

<!-- CHECK IF ERROR
	<production id="empty_expr_def">
		<lhs id="expr" />
		<rhs />
	</production>
-->

	<production id="string_value_def">
		<lhs id="string_expr" />
		<rhs>
			<right id="stringValue" />
		</rhs>
	</production>
	
	<!--CHECK IF ERROR FOR CONCAT -->
	<production id="concat_def">
		<lhs id="string_expr" />
		<rhs>
			<right id="string_expr" />
			<right id="plus" />
			<right id="string_expr" />
		</rhs>
	</production>
	
	<production id="plus_def">
		<lhs id="numeric_expr" />
		<rhs>
			<right id="numeric_expr" />
			<right id="plus" />
			<right id="numeric_expr" />
		</rhs>
	</production>

	<production id="minus_def">
		<lhs id="numeric_expr" />
		<rhs>
			<right id="numeric_expr" />
			<right id="minus" />
			<right id="numeric_expr" />
		</rhs>
	</production>

	<production id="star_def">
		<lhs id="numeric_expr" />
		<rhs>
			<right id="numeric_expr" />
			<right id="star" />
			<right id="numeric_expr" />
		</rhs>
	</production>

	<production id="divide_def">
		<lhs id="numeric_expr" />
		<rhs>
			<right id="numeric_expr" />
			<right id="div" />
			<right id="numeric_expr" />
		</rhs>
	</production>

	<production id="modulo_def">
		<lhs id="numeric_expr" />
		<rhs>
			<right id="numeric_expr" />
			<right id="modulo" />
			<right id="numeric_expr" />
		</rhs>
	</production>

	<production id="number_value_def">
		<lhs id="numeric_expr" />
		<rhs>
			<right id="numberValue" />
		</rhs>
	</production>

	<!-- @if (a < b) { @return a; } @else { @return b;} -->
	<production id="if_def">
		<lhs id="instruction" />
		<rhs>
			<right id="_if" />
			<right id="lpar" />
			<right id="booleanExpr" />
			<right id="rpar" />
			<right id="l_brace" />
			<right id="instructions" />
			<right id="r_brace" />
			<right id="else_bloc"/>
		</rhs>
	</production>

	<!-- BLOC IF-ELSE -->
	<production id="empty_else_bloc">
		<lhs id="else_bloc"/>
		<rhs />
	</production>
	
	<production id="full_else_bloc">
		<lhs id="else_bloc"/>
		<rhs>
			<right id="l_brace"/>
			<right id="instructions"/>
			<right id="r_brace" />
		</rhs>
	</production>
	
	<production id="and_def">
		<lhs id="booleanExpr" />
		<rhs>
			<right id="booleanExpr" />
			<right id="and" />
			<right id="booleanExpr" />
		</rhs>
	</production>

	<production id="or_def">
		<lhs id="booleanExpr" />
		<rhs>
			<right id="booleanExpr" />
			<right id="or" />
			<right id="booleanExpr" />
		</rhs>
	</production>

	<production id="equals_def">
		<lhs id="booleanExpr" />
		<rhs>
			<right id="numeric_expr" />
			<right id="equals" />
			<right id="numeric_expr" />
		</rhs>
	</production>

	<production id="not_equals_def">
		<lhs id="booleanExpr" />
		<rhs>
			<right id="numeric_expr" />
			<right id="notEquals" />
			<right id="numeric_expr" />
		</rhs>
	</production>

	<production id="not_def">
		<lhs id="booleanExpr" />
		<rhs>
			<right id="not" />
			<right id="booleanExpr" />
		</rhs>
	</production>

	<production id="sup_def">
		<lhs id="booleanExpr" />
		<rhs>
			<right id="numeric_expr" />
			<right id="sup" />
			<right id="numeric_expr" />
		</rhs>
	</production>

	<production id="inf_def">
		<lhs id="booleanExpr" />
		<rhs>
			<right id="numeric_expr" />
			<right id="inf" />
			<right id="numeric_expr" />
		</rhs>
	</production>

	<production id="inf_equals_def">
		<lhs id="booleanExpr" />
		<rhs>
			<right id="numeric_expr" />
			<right id="inf" />
			<right id="equals" />
			<right id="numeric_expr" />
		</rhs>
	</production>

	<production id="sup_equals_def">
		<lhs id="booleanExpr" />
		<rhs>
			<right id="numeric_expr" />
			<right id="sup" />
			<right id="equals" />
			<right id="numeric_expr" />
		</rhs>
	</production>

	<production id="booleanValue_def">
		<lhs id="booleanExpr" />
		<rhs>
			<right id="booleanValue" />
		</rhs>
	</production>

	<production id="for_def">
		<lhs id="instruction" />
		<rhs>
			<right id="_for" />
			<right id="lpar" />
			<right id="init" />
			<right id="semicolon" />
			<right id="booleanExpr" />
			<right id="semicolon" />
			<right id="init" />
			<right id="rpar" />
			<right id="l_brace" />
			<right id="instructions" />
			<right id="r_brace" />
		</rhs>
	</production>

	<production id="foreach_def">
		<lhs id="instruction" />
		<rhs>
			<right id="_foreach" />
			<right id="lpar" />
			<right id="identifier" />
			<right id="_in" />
			<right id="identifier" />
			<right id="rpar" />
			<right id="l_brace" />
			<right id="instructions" />
			<right id="r_brace" />
		</rhs>
	</production>

	<production id="forever_def">
		<lhs id="instruction" />
		<rhs>
			<right id="forever" />
			<right id="l_brace" />
			<right id="instructions" />
			<right id="r_brace" />
		</rhs>
	</production>

	<production id="print_def">
		<lhs id="instruction" />
		<rhs>
			<right id="print" />
			<right id="lpar" />
			<right id="expr" />
			<right id="rpar" />
		</rhs>
	</production>

	<production id="println_def">
		<lhs id="instruction" />
		<rhs>
			<right id="println" />
			<right id="lpar" />
			<right id="expr" />
			<right id="rpar" />
		</rhs>
	</production>

	<production id="return_def">
		<lhs id="instruction" />
		<rhs>
			<right id="_return" />
			<right id="expr" />
		</rhs>
	</production>

	<production id="break_def">
		<lhs id="instruction" />
		<rhs>
			<right id="_break" />
		</rhs>
	</production>

	<production id="continue_def">
		<lhs id="instruction" />
		<rhs>
			<right id="_continue" />
		</rhs>
	</production>


	<production id="function_definition">
		<lhs id="instruction" />
		<rhs>
			<right id="def" />
			<right id="type" />
			<right id="identifier" />
			<right id="lpar" />
			<right id="params_list" />
			<right id="rpar" />
			<right id="l_brace" />
			<right id="instructions" />
			<right id="r_brace" />
		</rhs>
	</production>

	<production id="empty_params_list">
		<lhs id="params_list" />
		<rhs />
	</production>

	<production id="param_list_def">
		<lhs id="params_list"/>
		<rhs>
			<right id="param"/>
			<right id="params_list_tail"/>
		</rhs>
	</production>

	<production id="empty_params_list_tail">
		<lhs id="params_list_tail" />
		<rhs />
	</production>
	
	<production id="full_params_list_tail">
		<lhs id="params_list_tail"/>
		<rhs>
			<right id="comma"/>
			<right id="param"/>
			<right id="params_list_tail"/>
		</rhs>
	</production>

	<production id="param_def">
		<lhs id="param" />
		<rhs>
			<right id="type" />
			<right id="identifier" />
		</rhs>
	</production>

	<production id="object_type_def">
		<lhs id="type"/>
		<rhs>
			<right id="object_type"/>
		</rhs>
	</production>

	<production id="numeric_type_def">
		<lhs id="type" />
		<rhs>
			<right id="numeric_type" />
		</rhs>
	</production>

	<production id="string_type_def">
		<lhs id="type" />
		<rhs>
			<right id="string_type" />
		</rhs>
	</production>

	<production id="void_type_def">
		<lhs id="type" />
		<rhs>
			<right id="_void" />
		</rhs>
	</production>

	<production id="array_type_def">
		<lhs id="type" />
		<rhs>
			<right id="array_type" />
			<right id="sup"/>
			<right id="type"/>
			<right id="inf"/>
		</rhs>
	</production>
	
	<production id="function_type_def">
		<lhs id="type" />
		<rhs>
			<right id="function_type" />
		</rhs>
	</production>
	
	<production id="function_call_def">
		<lhs id="function_call" />
		<rhs>
			<right id="lpar" />
			<right id="args_list" />
			<right id="rpar" />
		</rhs>
	</production>

	<production id="empty_args_list">
		<lhs id="args_list" />
		<rhs />
	</production>

	<production id="full_args_list">
		<lhs id="args_list"/>
		<rhs>
			<right id="arg"/>
			<right id="args_list_tail"/>
		</rhs>
	</production>

	<production id="empty_args_list_tail">
		<lhs id="args_list_tail" />
		<rhs />
	</production>
	
	<production id="full_args_list_tail">
		<lhs id="args_list_tail"/>
		<rhs>
			<right id="comma"/>
			<right id="arg"/>
			<right id="args_list_tail"/>
		</rhs>
	</production>

	<production id="arg_def">
		<lhs id="arg" />
		<rhs>
			<right id="expr" />
		</rhs>
	</production>
	<!--
	<production id="numeric_arg">
		<lhs id="arg" />
		<rhs>
			<right id="numeric_expr" />
		</rhs>
	</production>

	<production id="string_arg">
		<lhs id="arg" />
		<rhs>
			<right id="string_expr" />
		</rhs>
	</production>
	-->
</parser>
